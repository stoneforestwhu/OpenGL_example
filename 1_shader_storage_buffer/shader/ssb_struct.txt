#version 450 core

layout(local_size_x = 4, local_size_y = 1, local_size_z = 1) in;

struct second_st{ 
  int k;     //  [8]             [16]
  float m;   //  [9]             [17]               
  //  n需要对齐到vec4，所以m和n之间空了8个bytes
  vec4 n;    //  [12 13 14 15]  [20 21 22 23]  [ 28 29 30 31]  [36 37 38 39]
};   //  32bytes

struct first_st{
  float i;   //  0 1 2
  vec3 j;    //  3 4 5 
  //  tt需要对齐到vec4，所以j和tt之间空了8个bytes  
  second_st tt[4];  //  
  int g;
};   //  96bytes

layout(binding = 0, std140) buffer TestInput1 {
  first_st mm_val;
} input_buffer;

layout(binding = 1, std140) buffer TestOutput1 {
  float m_val[4];  //  occupy 16bytes
  vec4 n_val[4];   //  occupy 16bytes
} output_buffer;


void main() {
  const int id = int(gl_GlobalInvocationID.x);
  output_buffer.m_val[id] = input_buffer.mm_val.tt[id].m;
  output_buffer.n_val[id] = input_buffer.mm_val.tt[id].n;
}